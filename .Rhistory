?arima
?cubicspline
library(pracma)
?cubicspline
?smooth.spline
?bs
library(spline)
install.packages("spline")
install.packages("splines")
library(splines)
?bs
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
plot(data)
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 7, 14, 21)))
spline_fit
summary(spline_fit)
x_lim <- range(data$x)
x_grid <- seq(x_lim[1], x_lim[2])
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, cex=1.5, pch=19)
lines(x_grid, preds)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 21)))
x_lim <- range(data$x)
x_grid <- c(0, 7, 14, 21)
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, cex=1.5, pch=19)
lines(x_grid, preds)
preds
?bs
lines(x_grid, preds)
preds
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 7, 14, 21)))
x_grid <- seq(x_lim[1], x_lim[2])
preds <- predict(spline_fit, newdata=list(x=x_grid))
preds
?slipnefun
?splinefun
?approxfun
?splinefun
splinefun(data)
s <- splinefun(data)
s(1)
s(2)
lines(seq(0, 21), s(seq(0, 21)))
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)))
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)))
lines(seq(0, 21), s(seq(0, 21)), col="red")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
legend(legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(1, 95, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 0, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
ylim(0, 30)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(0, 30), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 30, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(3, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(3, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(5, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(4, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(4, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
install.packages("patchwork")
install.packages("COVID-19")
install.packages("COVID19")
load("~/Desktop/PhD/Forecasting/Forecasting/.RData")
View(df_COVID19_ref_init)
x <- covid19(country = "Italy", level = 3, start = "2020-01-01", dir = '.')
library(COVID19)
x <- covid19(country = "Italy", level = 3, start = "2020-01-01", dir = '.')
x
View(x)
# Prophet with Covid-19 data
#
# Author: Daniele Baccega
# Data: COVID19 R library
# Prophet: https://facebook.github.io/prophet/docs/quick_start.html
# Import the necessary libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(COVID19)
library(prophet)
library(stringr)
library(scales)
library(patchwork)
# Include the common functions
source("common_functions.R")
setwd("~/Desktop/PhD/prophet-forecasting")
# Prophet with Covid-19 data
#
# Author: Daniele Baccega
# Data: COVID19 R library
# Prophet: https://facebook.github.io/prophet/docs/quick_start.html
# Import the necessary libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(COVID19)
library(prophet)
library(stringr)
library(scales)
library(patchwork)
# Include the common functions
source("common_functions.R")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
# Select the configuration (with or without variants)
variants <- TRUE
# Select the variants aggregation to use (if variants is set to TRUE)
who_labels <- TRUE
# Select the country
country <- "Italy"
# Download file and load data
data <- download_files_and_load_data(country, who_labels)
df_COVID19_ref_init <- data[[1]]
df_variants_init <- data[[2]]
updated_file <- data[[3]]
View(df_COVID19_ref_init)
# Prophet with Covid-19 data
#
# Author: Daniele Baccega
# Data: COVID19 R library
# Prophet: https://facebook.github.io/prophet/docs/quick_start.html
# Import the necessary libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(COVID19)
library(prophet)
library(stringr)
library(scales)
library(patchwork)
# Include the common functions
source("common_functions.R")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
# Select the configuration (with or without variants)
variants <- TRUE
# Select the variants aggregation to use (if variants is set to TRUE)
who_labels <- TRUE
# Select the country
country <- "Italy"
# Download file and load data
data <- download_files_and_load_data(country, who_labels)
df_COVID19_ref_init <- data[[1]]
df_variants_init <- data[[2]]
updated_file <- data[[3]]
# Initialize other variables
immunization_end_rate <- 1 / 180
mcmc_samples <- 1000
ref_data_flag <- rep(FALSE, 4)
time_steps <- c(7, 14, 21, 28)
internal_dir_name <- paste0("SIRD", if(variants) "_Variants" else "", if(immunization_end_rate > 0) "_Reinfection" else "", "_MCMC", mcmc_samples, "/")
View(df_COVID19_ref_init)
